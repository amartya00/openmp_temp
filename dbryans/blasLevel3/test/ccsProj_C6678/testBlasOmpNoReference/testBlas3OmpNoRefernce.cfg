xdc.loadCapsule('../../../lib/C66/blas3libSCOmp/blas3libSC.cfg');

// *******************************************************************
// Specify startup reset function 
var Reset = xdc.useModule("xdc.runtime.Reset");
    Reset.fxns[Reset.fxns.length++] = "&initSystem";

// ********************************************************************
var Thread = xdc.useModule('xdc.runtime.knl.Thread');
    Thread.Proxy = xdc.useModule('ti.sysbios.xdcruntime.ThreadSupport');

var timeStamp    = xdc.useModule('xdc.runtime.Timestamp');
// set to C64+ timestamp provider; c64x+ timestamp provider works for c66 as well
timeStamp.SupportProxy = xdc.useModule('ti.sysbios.family.c64p.TimestampProvider');

// ********************************************************************
/* Load OpenMP module */
var OpenMP = xdc.useModule('ti.omp.utils.OpenMP');
// use local stack
OpenMP.stackRegionId = -1;
OpenMP.stackSize = 0x4000;
OpenMP.setNumProcessors(8);

/* Use more efficient Notify driver */
var Notify          = xdc.module('ti.sdo.ipc.Notify');
Notify.SetupProxy   = xdc.module('ti.sdo.ipc.family.c647x.NotifyCircSetup');

/* Use more efficient MessageQ transport */
var MessageQ = xdc.module('ti.sdo.ipc.MessageQ');
MessageQ.SetupTransportProxy = 
        xdc.useModule('ti.sdo.ipc.transports.TransportShmNotifySetup');

// *******************************************************************
// Configure HeapOMP for the shared memory heap
var HeapOMP = xdc.useModule('ti.omp.utils.HeapOMP');
HeapOMP.sharedRegionId = 2;
HeapOMP.localHeapSize  = 0x8000;
HeapOMP.sharedHeapSize = 0x1f000000;

// Specify the Shared Region
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta( HeapOMP.sharedRegionId,
                            {   base: 0x80000000,
                                len:  HeapOMP.sharedHeapSize,
                                ownerProcId: 0,
                                cacheLineSize: 128,
                                cacheEnable: true,
                                createHeap: true,
                                isValid: true,
                                name: "sr2-ddr3",
                            }

);

// Initialize HeapMem parameters
var HeapMem      = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = HeapOMP.localHeapSize;

// Create a HeapOMP instance
var heapOmpParams = new HeapOMP.Params();
heapOmpParams.localHeap = HeapMem.create(heapMemParams)
heapOmpParams.sRegionId = HeapOMP.sharedRegionId;

// Setup defaultHeapInstance to a HeapOMP instance
var Memory = xdc.useModule('xdc.runtime.Memory');
if (Memory.defaultHeapInstance)
    Program.$logWarning("Memory.defaultHeapInstance already set!", this);

Memory.defaultHeapInstance = HeapOMP.create(heapOmpParams)
Program.global.dataHeap = Memory.defaultHeapInstance;

