// ********************************************************************
var Bios = xdc.useModule('ti.sysbios.BIOS');
 Bios.rtsGateType = Bios.GateHwi;
 Bios.taskEnabled = true; // Enable BIOS Task Scheduler 

Program.stack = 0x8000;

// ********************************************************************
// Configure SysStd to send System_printfs to standard out 
var System       = xdc.useModule('xdc.runtime.System');
var SysStd       = xdc.useModule('xdc.runtime.SysStd');
    System.SupportProxy = SysStd;
    System.extendedFormats = "%$S%f"; 

var Cache        = xdc.useModule('ti.sysbios.family.c66.Cache'); 
// all external memory cahceable
Cache.setMarMeta(0x80000000, 0x20000000, 0x9);

// *******************************************************************
// needed for edma LLD
var CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');

var EventCombiner = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
    EventCombiner.eventGroupHwiNum[0] = 7;
    EventCombiner.eventGroupHwiNum[1] = 8;
    EventCombiner.eventGroupHwiNum[2] = 9;
    EventCombiner.eventGroupHwiNum[3] = 10;

// Load the CSL package 
var Csl                         =   xdc.useModule('ti.csl.Settings');

// *******************************************************************
//
// Create all heaps in different sections of the memory.
//
// heap in DDR3; only to be used by core #0
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();

// heap in L2 SRAM; local to each core; can be used by all cores independnetly
    heapMemParams.size = 0x40100; // 256 K + few additional bytes to allow bank placement
    heapMemParams.sectionName = "l2Heap";
    heapMemParams.align = 8;
    Program.global.l2Heap = HeapMem.create(heapMemParams);
    Program.sectMap["l2Heap"] = "L2SRAM";

// heap in L1D SRAM; local to each core; can be used by all cores independnetly 
    heapMemParams.size = 0x4000; // 16 K
    heapMemParams.sectionName = "l1Heap";
    heapMemParams.align = 8;
    Program.global.l1Heap = HeapMem.create(heapMemParams);
    Program.sectMap["l1Heap"] = "L1DSRAM";

// heap in MSMC SRAM; divided in 8 heaps for use by each core (384 K per core)
    heapMemParams.size = 0x60000; 
    heapMemParams.align = 8;
    heapMemParams.sectionName = "msmcHeap0";
    Program.global.msmcHeap0 = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap0"] = "MSMCSRAM";

    heapMemParams.sectionName = "msmcHeap1";
    Program.global.msmcHeap1 = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap1"] = "MSMCSRAM";

    heapMemParams.sectionName = "msmcHeap2";
    Program.global.msmcHeap2 = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap2"] = "MSMCSRAM";

    heapMemParams.sectionName = "msmcHeap3";
    Program.global.msmcHeap3 = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap3"] = "MSMCSRAM";

    heapMemParams.sectionName = "msmcHeap4";
    Program.global.msmcHeap4 = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap4"] = "MSMCSRAM";

    heapMemParams.sectionName = "msmcHeap5";
    Program.global.msmcHeap5 = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap5"] = "MSMCSRAM";

    heapMemParams.sectionName = "msmcHeap6";
    Program.global.msmcHeap6 = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap6"] = "MSMCSRAM";

    heapMemParams.sectionName = "msmcHeap7";
    Program.global.msmcHeap7 = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap7"] = "MSMCSRAM";

var Memory = xdc.useModule('xdc.runtime.Memory');

// *******************************************************************

// *******************************************************************
// some memory mapping 
Program.sectMap[".dmaMem"]       = "MSMCSRAM_NOCACHE";


