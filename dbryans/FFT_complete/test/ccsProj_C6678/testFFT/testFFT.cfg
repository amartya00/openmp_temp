// ********************************************************************
var Bios = xdc.useModule('ti.sysbios.BIOS');
 Bios.rtsGateType = Bios.GateHwi;
 Bios.taskEnabled = true; // Enable BIOS Task Scheduler 

Program.stack = 0x8000;


// ********************************************************************
// Configure SysStd to send System_printfs to standard out 
var System       = xdc.useModule('xdc.runtime.System');
var SysStd       = xdc.useModule('xdc.runtime.SysStd');
    System.SupportProxy = SysStd;
    System.extendedFormats = "%$S%f"; 
    
// ********************************************************************
var Thread = xdc.useModule('xdc.runtime.knl.Thread');
    Thread.Proxy = xdc.useModule('ti.sysbios.xdcruntime.ThreadSupport');

var timeStamp    = xdc.useModule('xdc.runtime.Timestamp');
// set to C64+ timestamp provider; c64x+ timestamp provider works for c66 as well
timeStamp.SupportProxy = xdc.useModule('ti.sysbios.family.c64p.TimestampProvider');

var Cache        = xdc.useModule('ti.sysbios.family.c66.Cache'); 
// all external memory cahceable
Cache.setMarMeta(0x80000000, 0x20000000, Cache.PFX | Cache.PC);

// *******************************************************************
// needed for edma LLD
var CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');

var EventCombiner = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
    EventCombiner.eventGroupHwiNum[0] = 7;
    EventCombiner.eventGroupHwiNum[1] = 8;
    EventCombiner.eventGroupHwiNum[2] = 9;
    EventCombiner.eventGroupHwiNum[3] = 10;
    

// *******************************************************************
// Create all heaps in different sections of the memory, used for malloc
//
// heap in DDR3; only to be used by core #0
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();

// heap in L2 SRAM; local to each core; can be used by all cores independnetly
    heapMemParams.size = 0x48000; // 256 K
    heapMemParams.sectionName = "l2Heap";
    heapMemParams.align = 8;
    Program.global.l2Heap = HeapMem.create(heapMemParams);
    Program.sectMap["l2Heap"] = "L2SRAM";
    
// heap in MSMC SRAM; 
    heapMemParams.size = 0x200000; 
    heapMemParams.align = 8;
    heapMemParams.sectionName = "msmcHeap";
    Program.global.msmcHeap = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap"] = "MSMCSRAM";
    

// ********************************************************************
//Load OpenMP module 
var OpenMP = xdc.useModule('ti.omp.utils.OpenMP');
// use local stack
OpenMP.stackRegionId = -1;
OpenMP.stackSize = 0x4000;
OpenMP.setNumProcessors(8);
// disable openMP internal memory consistency
OpenMP.enableMemoryConsistency = false; 
// Non-cached MSMC Alias
OpenMP.noncachedMsmcAlias = 0xC0000000;

OpenMP.qmssInit = true;
OpenMP.ipcHeapSize = 0x30000;
OpenMP.qmssMemRegion = 0;
OpenMP.qmssStartIndex = 0;
OpenMP.qmssDestQueueNum = -1;
OpenMP.internalOsal = true;
OpenMP.cppiHwSem = 3;
OpenMP.qmssHwSem = 4;
OpenMP.mpaxIndex = 3;

// Use more efficient Notify driver
var Notify          = xdc.module('ti.sdo.ipc.Notify');
Notify.SetupProxy   = xdc.module('ti.sdo.ipc.family.c647x.NotifyCircSetup');

// Use more efficient MessageQ transport
var MessageQ = xdc.module('ti.sdo.ipc.MessageQ');
MessageQ.SetupTransportProxy = 
        xdc.useModule('ti.sdo.ipc.transports.TransportShmNotifySetup');

// *******************************************************************
// Configure HeapOMP for the shared memory heap
var HeapOMP = xdc.useModule('ti.omp.utils.HeapOMP');
HeapOMP.sharedRegionId = 2;
HeapOMP.localHeapSize  = 0x8000;
HeapOMP.sharedHeapSize = 0x1f000000;

// Specify the Shared Region
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta( HeapOMP.sharedRegionId,
                            {   base: 0x80000000,
                                len:  HeapOMP.sharedHeapSize,
                                ownerProcId: 0,
                                cacheLineSize: 128,
                                cacheEnable: true,
                                createHeap: true,
                                isValid: true,
                                name: "sr2-ddr3",
                            }

);

// Initialize HeapMem parameters
var HeapMem      = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = HeapOMP.localHeapSize;

// Create a HeapOMP instance
var heapOmpParams = new HeapOMP.Params();
heapOmpParams.localHeap = HeapMem.create(heapMemParams)
heapOmpParams.sRegionId = HeapOMP.sharedRegionId;

// Setup defaultHeapInstance to a HeapOMP instance
var Memory = xdc.useModule('xdc.runtime.Memory');
if (Memory.defaultHeapInstance)
    Program.$logWarning("Memory.defaultHeapInstance already set!", this);

Memory.defaultHeapInstance = HeapOMP.create(heapOmpParams)
Program.global.dataHeap = Memory.defaultHeapInstance;

// *******************************************************************
Program.sectMap[".dmaMem"]="MSMCSRAM_NOCACHE";
Program.sectMap[".dmaParamMem"]="MSMCSRAM_NOCACHE";
    