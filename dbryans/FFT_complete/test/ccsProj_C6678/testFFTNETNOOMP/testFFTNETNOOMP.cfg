// ********************************************************************
var Bios = xdc.useModule('ti.sysbios.BIOS');
 Bios.rtsGateType = Bios.GateHwi;
 //Bios.heapSize    = 0x8000;
 Bios.taskEnabled = true; // Enable BIOS Task Scheduler 

Program.stack = 0x8000;


// ********************************************************************
// Configure SysStd to send System_printfs to standard out 
var System       = xdc.useModule('xdc.runtime.System');
var SysStd       = xdc.useModule('xdc.runtime.SysStd');
    System.SupportProxy = SysStd;
    System.extendedFormats = "%$S%f"; 
    
// ********************************************************************
var Thread = xdc.useModule('xdc.runtime.knl.Thread');
    Thread.Proxy = xdc.useModule('ti.sysbios.xdcruntime.ThreadSupport');

var timeStamp    = xdc.useModule('xdc.runtime.Timestamp');
// set to C64+ timestamp provider; c64x+ timestamp provider works for c66 as well
timeStamp.SupportProxy = xdc.useModule('ti.sysbios.family.c64p.TimestampProvider');

// *******************************************************************
// needed for edma LLD
var CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');

var EventCombiner = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
    EventCombiner.eventGroupHwiNum[0] = 7;
    EventCombiner.eventGroupHwiNum[1] = 8;
    EventCombiner.eventGroupHwiNum[2] = 9;
    EventCombiner.eventGroupHwiNum[3] = 10;
    

// *******************************************************************
// Create all heaps in different sections of the memory, used for malloc
//
// heap in DDR3; only to be used by core #0
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
    heapMemParams.size = 0x1f000000; 
    heapMemParams.sectionName = "ddr3Heap";
    heapMemParams.align = 8;
    Program.global.dataHeap = HeapMem.create(heapMemParams);
    Program.sectMap["ddr3Heap"] = "DDR3";

// Setup defaultHeapInstance to a HeapOMP instance
var Memory = xdc.useModule('xdc.runtime.Memory');
if (Memory.defaultHeapInstance)
    Program.$logWarning("Memory.defaultHeapInstance already set!", this);

Memory.defaultHeapInstance = Program.global.dataHeap

// heap in L2 SRAM; local to each core; can be used by all cores independnetly
    heapMemParams.size = 0x40000; // 256 K
    heapMemParams.sectionName = "l2Heap";
    heapMemParams.align = 8;
    Program.global.l2Heap = HeapMem.create(heapMemParams);
    Program.sectMap["l2Heap"] = "L2SRAM";
    
// heap in MSMC SRAM; 
    heapMemParams.size = 0x200000; 
    heapMemParams.align = 8;
    heapMemParams.sectionName = "msmcHeap";
    Program.global.msmcHeap = HeapMem.create(heapMemParams);
    Program.sectMap["msmcHeap"] = "MSMCSRAM";
    

var Cache        = xdc.useModule('ti.sysbios.family.c66.Cache'); 
// all external memory cahceable; write-through disabled (better performance if disabled)
Cache.setMarMeta(0x80000000, 0x20000000, Cache.PFX | Cache.PC);

// Load and configure NDK
var Global = xdc.useModule('ti.ndk.config.Global');

// 
// This allows the heart beat (poll function) to be created but does not generate the stack threads 
//
// Look in the cdoc (help files) to see what CfgAddEntry items can be configured. We tell it NOT
// to create any stack threads (services) as we configure those ourselves in our Main Task
// thread.
//  
Global.enableCodeGeneration = false;

// Load the CSL package  - LoadPackage is equivalent to linking the library 
var Csl 					    = 	xdc.loadPackage('ti.csl');

// Load the CPPI package - LoadPackage is equivalent to linking the library 
var Cppi                        =   xdc.loadPackage('ti.drv.cppi');     

// Load the QMSS package  - LoadPackage is equivalent to linking the library
var Qmss                        =   xdc.loadPackage('ti.drv.qmss');

// Load the PA package  - LoadPackage is equivalent to linking the library
var Pa 							= 	xdc.loadPackage('ti.drv.pa');

// Load Platform Library - LoadPackage is equivalent to linking the library 
var Plib						= xdc.loadPackage('ti.platform.evmc6678l');

// Load Platform Library - LoadPackage is equivalent to linking the library 
var Nimulib						= xdc.loadPackage('ti.transport.ndk');

var Startup   = xdc.useModule('xdc.runtime.Startup');
Startup.firstFxns.$add('&lld_init');
// Add init function 
Startup.lastFxns.$add('&EVM_init');

var Task      = xdc.useModule('ti.sysbios.knl.Task');
Task.common$.namedInstance = true;
Task.defaultStackSize = 0x4000;

var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore'); 

Program.sectMap[".cppi"]             = {loadSegment: "MSMCSRAM", loadAlign:16};
Program.sectMap[".qmss"]             = {loadSegment: "MSMCSRAM", loadAlign:16};
Program.sectMap[".nimu_eth_ll2"]     = {loadSegment: "MSMCSRAM", loadAlign:16};
Program.sectMap[".far:NDK_PACKETMEM"]= {loadSegment: "MSMCSRAM", loadAlign: 128};
Program.sectMap[".far:NDK_OBJMEM"]   = {loadSegment: "L2SRAM", loadAlign: 16};
Program.sectMap[".resmgr_memregion"] = {loadSegment: "MSMCSRAM", loadAlign:128};
Program.sectMap[".resmgr_handles"]   = {loadSegment: "MSMCSRAM", loadAlign:16};
Program.sectMap[".resmgr_pa"]        = {loadSegment: "MSMCSRAM", loadAlign:8};

Program.sectMap[".plt"]              = "MSMCSRAM";
Program.sectMap["platform_lib"]      = "MSMCSRAM";
Program.sectMap[".far:NDK_MMBUFFER1"]= "MSMCSRAM";

// *******************************************************************
Program.sectMap[".dmaMem"]="MSMCSRAM";
Program.sectMap[".dmaParamMem"]="MSMCSRAM";
